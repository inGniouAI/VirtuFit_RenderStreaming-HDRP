//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/CameraControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControl"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""d37af0b2-886a-46a2-88a2-4dad11ccc5aa"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTrigger"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0a755071-7b8d-4f4a-8ae3-57e9ee25723c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""00478aec-aed0-484e-8dae-dea7efe62fd3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTrigger"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c12aa93d-159b-4c91-bcb4-2d1e2facdfdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""516bb0f9-4ae9-48ed-8f28-bdd12ed17037"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""2efc34b5-7951-4818-97c0-72f968e03cfe"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03b8967b-3032-48f7-8c27-06d8cf760041"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78e96b0c-9667-476f-b8d4-52e9612540fc"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89a8faa0-6c7e-4d25-a377-c672765592c9"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49bd50dc-1626-45cc-90eb-7f3fb2580bb0"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d5a7fb4-8622-46a7-a5ab-0f2b9b54b4ac"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_PrimaryTrigger = m_Camera.FindAction("PrimaryTrigger", throwIfNotFound: true);
        m_Camera_PrimaryPosition = m_Camera.FindAction("PrimaryPosition", throwIfNotFound: true);
        m_Camera_SecondaryTrigger = m_Camera.FindAction("SecondaryTrigger", throwIfNotFound: true);
        m_Camera_SecondaryPosition = m_Camera.FindAction("SecondaryPosition", throwIfNotFound: true);
        m_Camera_MouseScroll = m_Camera.FindAction("MouseScroll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_PrimaryTrigger;
    private readonly InputAction m_Camera_PrimaryPosition;
    private readonly InputAction m_Camera_SecondaryTrigger;
    private readonly InputAction m_Camera_SecondaryPosition;
    private readonly InputAction m_Camera_MouseScroll;
    public struct CameraActions
    {
        private @CameraControl m_Wrapper;
        public CameraActions(@CameraControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTrigger => m_Wrapper.m_Camera_PrimaryTrigger;
        public InputAction @PrimaryPosition => m_Wrapper.m_Camera_PrimaryPosition;
        public InputAction @SecondaryTrigger => m_Wrapper.m_Camera_SecondaryTrigger;
        public InputAction @SecondaryPosition => m_Wrapper.m_Camera_SecondaryPosition;
        public InputAction @MouseScroll => m_Wrapper.m_Camera_MouseScroll;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @PrimaryTrigger.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnPrimaryTrigger;
                @PrimaryTrigger.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnPrimaryTrigger;
                @PrimaryTrigger.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnPrimaryTrigger;
                @PrimaryPosition.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnPrimaryPosition;
                @SecondaryTrigger.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnSecondaryTrigger;
                @SecondaryTrigger.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnSecondaryTrigger;
                @SecondaryTrigger.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnSecondaryTrigger;
                @SecondaryPosition.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnSecondaryPosition;
                @SecondaryPosition.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnSecondaryPosition;
                @SecondaryPosition.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnSecondaryPosition;
                @MouseScroll.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScroll;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryTrigger.started += instance.OnPrimaryTrigger;
                @PrimaryTrigger.performed += instance.OnPrimaryTrigger;
                @PrimaryTrigger.canceled += instance.OnPrimaryTrigger;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @SecondaryTrigger.started += instance.OnSecondaryTrigger;
                @SecondaryTrigger.performed += instance.OnSecondaryTrigger;
                @SecondaryTrigger.canceled += instance.OnSecondaryTrigger;
                @SecondaryPosition.started += instance.OnSecondaryPosition;
                @SecondaryPosition.performed += instance.OnSecondaryPosition;
                @SecondaryPosition.canceled += instance.OnSecondaryPosition;
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface ICameraActions
    {
        void OnPrimaryTrigger(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnSecondaryTrigger(InputAction.CallbackContext context);
        void OnSecondaryPosition(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
    }
}
